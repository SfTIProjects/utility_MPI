# Read this Post for runing processis in parallel
# https://stackoverflow.com/questions/42979271/how-to-run-multiple-instances-of-the-same-python-script-which-uses-subprocess-ca
# 
# How to use this program
# srun python mk_multiple_maven_apps_n_move_files_MPI.py -s ../pmdpasscodesnippets_java -pd ../my_codesnippet_analysis/CheckStyle3 -csp checks_lib -r
# To run it on slum:
# $    sbatch mk_multiple_maven_apps_n_move_files_MPI.sl


# Fetch the Files 
# Divide the Files equaliy according to the number
# Generate the Maven Applications based on the number of files
# delete the initial App.java file created by default
# Update the Pom.xml File to suite
# add google check.xml


import numpy as np
from mpi4py import MPI

import subprocess as sp
# what will be used to read files
import glob
import shutil
import os
import numpy as np
import re

import xml.etree.ElementTree as ET
#from xml.dom import minidom

import argparse

parser = argparse.ArgumentParser(
    description='Run CheckStyle on Java Apps.'
)


#e.g. ../pmdpasscodesnippets_java
parser.add_argument(
    "-s",
    "--source",
    help="Enter the location of the source folder to copy or move the source code files e.g java, py, cpp"
)

# command -mv ---> sets mv to True
# command --->sets mv to False
#https://stackoverflow.com/questions/60999816/argparse-not-parsing-boolean-arguments
parser.add_argument(
    "-mv",
    "--movesource", 
    action="store_true",
    help="Move rather than copy the source codes files"
)

parser.add_argument(
     "-t",
    "--sourcetype",
    default="java",
    type=str,
    help="Enter source type java, py, cpp"
)

#e.g. ../my_codesnippet_analysis/CheckStyle3
parser.add_argument(
     "-pd",
    "--parentdest",
    default="",
    type=str, 
     help="Parent path where multiple folders will be generated (before the autogenerated folders)"
    
)

parser.add_argument(
     "-a",
    "--app",
    default='my-javacodeanalysis-app',
    help="Enter general application name that will be auto generated e.g my-javacodeanalysis-app with will be appended with numbers 0, 1, ..., n"
)

parser.add_argument(
     "-cd",
    "--childdest",
    default="src/main/java",
    type=str, 
     help="The child destination path(s) where the multiple subfolders you want to copy files to (after the autogenerated folders)"
)

parser.add_argument(
     "-raf",
    "--removeautogenfile",
    default="App",
    type=str,
    help="Enter the name of an auto generated class that is created along with the maven app that you want removed."
)

# command -r ---> sets r to True
# command --->sets r to False
#https://stackoverflow.com/questions/60999816/argparse-not-parsing-boolean-arguments
parser.add_argument(
    "-r",
    "--removeapp", 
    action="store_true",
    help="removes the previous apps if they exist before creating a new one"
)


parser.add_argument(
    "-p",
    "--pkg",
    default='myjavacodeanalysis',
    help="Enter the package name you want each class to have or the java files to be moved to"
)

parser.add_argument(
    "-cv",
    "--checkstyleversion", 
    default="9.1",
    type=str,
    help="Enter the check style version"
)

parser.add_argument(
    "-mcpv",
    "--mavencheckstylepluginversion", 
    default="3.1.2",
    type=str,
    help="Enter the maven checkstyle plugin version"
)

parser.add_argument(
    "-mcp",
    "--mavencheckstyleplugin", 
    default="maven-checkstyle-plugin",
    type=str,
    help="Enter the maven checkstyle plugin"
)

parser.add_argument(
    "-scs",
    "--checkstylexmlchecks", 
    default="google_checks.xml",
    type=str,
    help="Enter the full name of the checks file plus extension (default is the google_checks.xml which will be auto included in the root directory where the pom.xml is located)."
)

# e.g. checks_lib
parser.add_argument(
    "-csp",
    "--checkstylexmlcheckssourcepath", 
    default="",
    type=str,
    help="Enter the path to copy the checks file from."
)

parser.add_argument(
    "-cdp",
    "--checkstylexmlchecksdestpath", 
    default="",
    type=str,
    help="Enter the path to copy the checks file to. (if you do not want it to be in the root dir with the pom.xml)."
)

parser.add_argument(
     "-pt",
    "--pattern",
    default="",
    type=str,
    help="Are there particular pattern of files you want to select."
)
 

args = parser.parse_args()

java_app = args.app
java_pkg = args.pkg
rem_java_app = args.removeapp
src_fdr = args.source
src_type = args.sourcetype
move_src = args.movesource
remove_auto_gen_file = args.removeautogenfile
pattern = args.pattern
parent_dest_path = args.parentdest
child_dest_path = args.childdest
checkstyle_version = args.checkstyleversion
maven_checkstyle_plugin_version = args.mavencheckstylepluginversion
maven_checkstyle_plugin = args.mavencheckstyleplugin
checkstyle_xml_checks = args.checkstylexmlchecks
checkstyle_xml_checks_source_path = args.checkstylexmlcheckssourcepath
checkstyle_xml_checks_dest_path = args.checkstylexmlchecksdestpath

    
#Retrieves MPI environment
comm = MPI.COMM_WORLD

#Sets size as the total number of MPI tasks
size = comm.Get_size()

#Sets rank as the specific MPI rank on all MPI tasks
rank = comm.Get_rank()

# Get the directory of all the files to be read from
# get the directory to where the *.java files in the pmdpasscodesnippets_java path or folder
#file_location = os.path.join('../pmdpasscodesnippets_java', '*.java')
file_location = os.path.join(src_fdr, '{}*.{}'.format(pattern, src_type))

# get all the file names and their paths
filenames = glob.glob(file_location)

# number of files
print('Number of Java Files {}'.format(len(filenames)))



#If the rank is 0 (master) then split filenames equally amoung size groups MPI tasks
if rank == 0:
    split_filenames = np.array_split(filenames, size, axis = 0)
    
else:
    filenames = None
    split_filenames = None
    
                                                         
#Scatter the filenames among each MPI task
rank_filenames = comm.scatter(split_filenames, root = 0)



pkg_name_full=java_pkg
app_name_partial=java_app

########################################################
# Updates the pom.xml file with checkstyle requirements #
########################################################
def update_pom_xml(
    app_name
):
    
    ####### Retrieve the pom.xml file from the java app #######
    pom_xml = '{}/pom.xml'.format(app_name)
    #tree = ET.parse('pom.xml')
    tree = ET.parse(pom_xml)
    
    root = tree.getroot()

    ###### Register namespace ######
    # retrieve 'http://maven.apache.org/POM/4.0.0' from root tag '{http://maven.apache.org/POM/4.0.0}project'
    pattern = re.compile(r'(https?:\/\/(www\.)?\w+\.\w+.\w+\/\w+\/\d+\.\d+\.\d)')
    root_namespace = pattern.findall(root.tag)[0][0]
   
    #ET.register_namespace('', "http://maven.apache.org/POM/4.0.0")
    ET.register_namespace('', root_namespace)

    # instantiate empty attributes
    attrib = {}

    ######### update the 'build' tag with the checkstyle requirements ##########
    # get the build
    # <build>
    build = root[8]
    # <build><pluginManagement>
    pluginManagement = build[0]
    # <build><pluginManagement><plugins>
    plugins = pluginManagement[0]

    # <build><pluginManagement><plugins><plugin>
    plugin = plugins.makeelement('plugin', attrib)
    plugins.append(plugin)

    # <build><pluginManagement><plugins><plugin><groupId>
    groupId = plugin.makeelement('groupId', attrib)
    groupId.text = 'org.apache.maven.plugins'
    plugin.append(groupId)

    # <build><pluginManagement><plugins><plugin><artifactId>
    artifactId = plugin.makeelement('artifactId', attrib)
    artifactId.text = maven_checkstyle_plugin
    plugin.append(artifactId)

    # <build><pluginManagement><plugins><plugin><version>
    version = plugin.makeelement('version', attrib)
    version.text = maven_checkstyle_plugin_version
    plugin.append(version)


    # <build><pluginManagement><plugins><plugin><dependencies>
    dependencies = plugin.makeelement('dependencies', attrib)
    plugin.append(dependencies)

    # <build><pluginManagement><plugins><plugin><dependencies><dependency>
    dependency = dependencies.makeelement('dependency', attrib)
    dependencies.append(dependency)

    # <build><pluginManagement><plugins><plugin><dependencies><dependency><groupId>
    groupId = dependency.makeelement('groupId', attrib)
    groupId.text = 'com.puppycrawl.tools'
    dependency.append(groupId)

    # <build><pluginManagement><plugins><plugin><dependencies><dependency><artifactId>
    artifactId = dependency.makeelement('artifactId', attrib)
    artifactId.text = 'checkstyle'
    dependency.append(artifactId)

    # <build><pluginManagement><plugins><plugin><dependencies><dependency><version>
    version = dependency.makeelement('version', attrib)
    version.text = checkstyle_version
    dependency.append(version)

    # <build><pluginManagement><plugins><plugin><executions>
    executions = plugin.makeelement('executions', attrib)
    plugin.append(executions)

    # <build><pluginManagement><plugins><plugin><executions><execution>
    execution = executions.makeelement('execution', attrib)
    executions.append(execution)

    # <build><pluginManagement><plugins><plugin><executions><execution><id>
    ids = execution.makeelement('id', attrib)
    ids.text = 'checkstyle'
    execution.append(ids)

    # <build><pluginManagement><plugins><plugin><executions><execution><phase>
    phase = execution.makeelement('phase', attrib)
    phase.text = 'validate'
    execution.append(phase)

    # <build><pluginManagement><plugins><plugin><executions><execution><goals>
    goals = execution.makeelement('goals', attrib)
    execution.append(goals)

    # <build><pluginManagement><plugins><plugin><executions><execution><goals><goal>
    goal = goals.makeelement('goal', attrib)
    goal.text = 'check'
    goals.append(goal)

    # <build><pluginManagement><plugins><plugin><executions><execution><configuration>
    configuration = execution.makeelement('configuration', attrib)
    execution.append(configuration)

    # <build><pluginManagement><plugins><plugin><executions><execution><configuration><configLocation>
    configLocation = configuration.makeelement('configLocation', attrib)
    configLocation.text = checkstyle_xml_checks
    if len(checkstyle_xml_checks_dest_path) > 0:
        configLocation.text = '{}/{}'.format(checkstyle_xml_checks_dest_path, checkstyle_xml_checks)
    configuration.append(configLocation)

    # <build><pluginManagement><plugins><plugin><executions><execution><configuration><encoding>
    encoding = configuration.makeelement('encoding', attrib)
    encoding.text = 'UTF-8'
    configuration.append(encoding)

    # <build><pluginManagement><plugins><plugin><executions><execution><configuration><failsOnError>
    failsOnError = configuration.makeelement('failsOnError', attrib)
    failsOnError.text = 'false'
    configuration.append(failsOnError)

    # <build><pluginManagement><plugins><plugin><executions><execution><configuration><failOnViolation>
    failOnViolation = configuration.makeelement('failOnViolation', attrib)
    failOnViolation.text = 'false'
    configuration.append(failOnViolation)


    ###### Append the pom.xml with the 'reporting' checkstyle configurations #######
    
    #<reporting>
    reporting = root.makeelement('reporting', attrib)
    root.append(reporting)

    #<reporting><plugins>
    plugins = reporting.makeelement('plugins', attrib)
    reporting.append(plugins)

    #<reporting><plugins><plugin>
    plugin = plugins.makeelement('plugin', attrib)
    plugins.append(plugin)

    #<reporting><plugins><plugin><groupId>
    groupId = plugin.makeelement('groupId', attrib)
    groupId.text = 'org.apache.maven.plugins'
    plugin.append(groupId)

    #<reporting><plugins><plugin><artifactId>
    artifactId = plugin.makeelement('artifactId', attrib)
    artifactId.text = maven_checkstyle_plugin
    plugin.append(artifactId)

    #<reporting><plugins><plugin><version>
    version = plugin.makeelement('version', attrib)
    version.text = maven_checkstyle_plugin_version
    plugin.append(version)

    #<reporting><plugins><plugin><configuration>
    configuration = plugin.makeelement('configuration', attrib)
    plugin.append(configuration)

    #<reporting><plugins><plugin><configuration><configLocation>
    configLocation = configuration.makeelement('configLocation', attrib)
    configLocation.text = checkstyle_xml_checks
    if len(checkstyle_xml_checks_dest_path) > 0:
        configLocation.text = '{}/{}'.format(checkstyle_xml_checks_dest_path, checkstyle_xml_checks) 
    configuration.append(configLocation)

    #<reporting><plugins><plugin><configuration><failsOnError>
    failsOnError = configuration.makeelement('failsOnError', attrib)
    failsOnError.text = 'false'
    configuration.append(failsOnError)

    #<reporting><plugins><plugin><configuration><failOnViolation>
    failOnViolation = configuration.makeelement('failOnViolation', attrib)
    failOnViolation.text = 'false'
    configuration.append(failOnViolation)

    #tree.write('pom.xml')
    tree.write(pom_xml)
    
####################################################################
# Creates one or more maven applications depending on your choice #
####################################################################
def create_mvn_app_n_copy_multiple_java_files_to_analyse():
    
    app_name_full = '{}{}'.format(app_name_partial, rank)
    app_name_full_parent_path = '{}/{}{}'.format(parent_dest_path, app_name_partial, rank)
    app_name_full_parent_child_path = '{}/{}{}/{}'.format(parent_dest_path, app_name_partial, rank, child_dest_path)
    
    if rem_java_app == True:
        # remove existing directory if they already exist
        #remove_dir_if_exist_cmd = 'rm -rf {}{}'.format(app_name_full)
        remove_dir_if_exist_cmd = 'rm -rf {}'.format(parent_dest_path)
        cmd1 = sp.run(
            remove_dir_if_exist_cmd, # command
            capture_output=True,
            text=True,
            shell=True
        )
       
    
    # create java app 
    #maven_app_cmd = 'mvn archetype:generate -DgroupId={} -DartifactId={} -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false'.format(pkg_name_full, app_name_full)
    maven_app_cmd = 'cd {}; mvn archetype:generate -DgroupId={} -DartifactId={} -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false'.format(parent_dest_path, pkg_name_full, app_name_full)
    cmd2 = sp.run(
        maven_app_cmd, # command
        capture_output=True,
        text=True,
        shell=True
    )

    # update pom.xml
    update_pom_xml(app_name_full)
    
    # format the pom.xml file 
    #fmt_cmd = 'xmllint --format pom.xml > pom_fmt.xml | rm pom.xml | mv pom_fmt.xml pom.xml'
    fmt_cmd = 'cd {}; xmllint --format pom.xml > pom_fmt.xml | rm pom.xml | mv pom_fmt.xml pom.xml'.format(parent_dest_path)
    cmd4 = sp.run(
        fmt_cmd, # command
        capture_output=True,
        text=True,
        shell=True
    )
    
    # Copy the 'google_checks.xml' from the check_lib to the root dir of app 
    #cp_checks_xml_cmd = 'cp {}/google_checks.xml {}'.format(checkstyle_xml_checks_source_path,checkstyle_xml_checks, app_name_full)
    cp_checks_xml_cmd = 'cp {}/{} {}'.format(checkstyle_xml_checks_source_path, checkstyle_xml_checks, app_name_full_parent_path)
    if len(checkstyle_xml_checks_dest_path) > 0:
        cp_checks_xml_cmd = 'cp {}/{} {}/{}'.format(checkstyle_xml_checks_source_path, checkstyle_xml_checks, checkstyle_xml_checks_dest_path, app_name_full_parent_path)
        
    cmd5 = sp.run(
        cp_checks_xml_cmd, # command
        capture_output=True,
        text=True,
        shell=True
    )
    #print(p4.stdout)
    
     
    # Delete the App.java file that is created by default from src/main/java/yourpkgdir
    # rem_def_java_app_file_cmd = 'rm {}/src/main/java/{}/App.java'.format(app_name_full, pkg_name_full, remove_auto_gen_file)
    #rem_def_java_app_file_cmd = 'rm {}/src/main/java/{}/{}.{}'.format(app_name_full, pkg_name_full, remove_auto_gen_file, src_type)
    rem_def_java_app_file_cmd = 'rm {}/{}/{}.{}'.format(app_name_full_parent_child_path, pkg_name_full, remove_auto_gen_file, src_type)
    cmd6 = sp.run(
        rem_def_java_app_file_cmd, # command
        capture_output=True,
        text=True,
        shell=True
    )
    #print(p5.stdout)
    
    # Move source code files
    print('Rank_len {}'.format(len(rank_filenames)))
    #dest_dir = '{}/src/main/java/{}'.format(app_name_full, pkg_name_full)
    dest_dir = '{}/{}'.format(app_name_full_parent_child_path, pkg_name_full)
    if move_src == True:
        #move a list of file from source to dest
        for file in rank_filenames:
            shutil.move(file, dest_dir)
    else:
        #copy a list of file from source to dest
        for file in rank_filenames:
            shutil.copy(file, dest_dir)
    
    #START RUNNING THE MAVEN ANALYSIS
    
    


# Create maven app and move files on each process
create_mvn_app_n_copy_multiple_java_files_to_analyse()


print('Done rank {} -:)'.format(rank))

